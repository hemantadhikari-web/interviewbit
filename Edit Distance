
int helper(string A,string B ,int m, int n){
    if(m>=A.size() or n>=B.size()){
        return 0;
    }
    if(A[m] == B[n]){
        return helper(A,B,m+1,n+1);
    }else{
        return 1+min(helper(A,B,m+1,n+1),min(helper(A,B,m+1,n),helper(A,B,m,n+1)));
    } 
    
}

/*
void print(vector<vector<int>> dp){
    for(int i=0;i<dp.size();i++){
        for(int j=0;j<dp[0].size();j++){
            cout<<dp[i][j]<<" ";
        }
        cout<<endl;
    }
}
*/
int Solution::minDistance(string A, string B) {
    if(A==B){return 0;}
    /*int ans = helper(A,B,0,0);
    return ans;*/
    int m = A.size();
    int n =B.size();
    vector<vector<int>> dp(m+1,vector<int>(n+1,0));
    for(int j=0;j<n+1;j++){
        dp[0][j]=j;
        //cout<<"rr"<<endl;
    }
    for(int i=0;i<m+1;i++){
        dp[i][0]=i;
        //cout<<"rr"<<endl;
    }
    
    for(int i=1;i<m+1;i++){
        for(int j=1;j<n+1;j++){
            if(A[i-1]==B[j-1]){
                dp[i][j]= dp[i-1][j-1];
            }else{
                dp[i][j] =1 + min(dp[i-1][j],min(dp[i-1][j-1],dp[i][j-1]));
            }
        }
    }
   // print(dp);
    return dp[m][n];
    
}
