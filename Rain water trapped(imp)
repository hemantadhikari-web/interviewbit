Given an integer array A of non-negative integers representing an elevation map 
where the width of each bar is 1, compute how much water it is able to trap after raining.

int Solution::trap(const vector<int> &A) {
/* 
//sol-1
int n = A.size();

int leftmax[n];

//int n = A.size();


leftmax[0] = A[0];
for(int i = 1; i<n; i++){
    leftmax[i] = max(leftmax[i-1], A[i]);
    
}

int rightmax[n];
rightmax[n-1] = A[n-1];
for(int i = n-2; i>=0; i--){
    rightmax[i] = max(rightmax[i+1], A[i]);
    
}

int water[n];
//cout<<"water"<<endl;
for(int i =0; i<n; i++){
    water[i] = min(leftmax[i], rightmax[i])-A[i];
   // cout<<water[i]<<", ";
}
 
 
int sum =0;
//vector<int> area;
for(int i =0; i<n; i++){
   sum+= water[i];
}

return sum;
*/
//soln-2
            int n = A.size();
            int left = 0; int right = n - 1;
            int res = 0;
            int maxleft = 0, maxright = 0;
            while(left <= right){
                if(A[left] <= A[right]){
                    if(A[left] >= maxleft) maxleft = A[left];
                    else res += maxleft-A[left];
                    left++;
                }
                else{
                    if(A[right] >= maxright) maxright = A[right];
                    else res += maxright - A[right];
                    right--;
                }
            }
            return res;
}
