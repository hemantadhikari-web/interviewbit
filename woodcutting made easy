/*bool check(vector < int > & A, int val, int B) {
  int rem = 0;
  int n = A.size();
  for (int i = 0; i < n; i++) {
    if (A[i] > val){ rem += A[i] - val;}
  }

  if (rem >= B) return true;
  return false;
}

int Solution::solve(vector < int > & A, int B) {
  int low = 0;
  int high = 1000000;
  int ans = 0;
  sort(A.begin(),A.end());
  while (low <= high) {
    int mid = (low + high) / 2;
    if (check(A, mid, B)) {
      ans = mid;
      low = mid + 1;
    } else high = mid - 1;

    //cout<<low<<" " <<high<<" "<<mid<<endl;

    //cout<<"mid "<<mid<<endl;
  }
  return ans;
}*/

typedef long long ll;
int Solution::solve(vector<int> &A, int B) {
    ll i=0;
    ll wood=0;
    ll maxE=*max_element(A.begin(),A.end());
    vector<int> h(maxE+2,0);
    ll l=A.size();
    for(int a=0;a<l;a++)
    h[A[a]]++;
    
    for(i=maxE;i>=0 && wood<B;i--){
        h[i]+=h[i+1];
        wood+=h[i];
    }
    return i;
}


