Implement pow(x, n) % d.

In other words, given x, n and d,

find   (xn  % d)

Note that remainders on division cannot be negative. 

In other words, make sure the answer you return is non negative.

Input : x = 2, n = 3, d = 3
Output : 2
//HInt
There are two major things to note here:

1) Overflow situation: Note that if x is large enough, multiplying x to the answer might overflow in integer.

2) Multiplying x one by one to the answer is O(n). We are looking for something better than O(n).

If n is even, note the following:

x ^ n = (x * x) ^ n/2

Can you use the above observation to come up with a solution better than O(n)?



//soln
/*use python for easy code*/
def pow(self, x, n, d):
    if x == 0:
        return 0
    if n == 0:
        return 1
    if n == 1:
        return x % d  # notice the modulo operation
    if n % 2 == 0:
        # power is even => calculate once for n/2 and then square it.
        half = self.pow(x, n//2, d)
        return (half * half) % d  # notice the modulo operation
    else:
        # power is odd => calculate once for ((n-1) / 2) (even), square it, then multiply by x.
        half = self.pow(x, (n-1) // 2, d)
        return (half * half * x) % d  # notice the modulo operation
        
/*tricks c++*/

int Solution::pow(int x, int n, int d) {
if (n == 0) {
        return 1 % d;
}

    long long ans = 1, base = x;
    while (n > 0) 
    {
        if (n % 2 == 1)
        {
            ans = (ans * base) % d;
            cout<<"ans "<<ans <<" with n "<<n<<endl;
            n--;
        } 
        else
        {
            base = (base * base) % d;
            n /= 2;
            cout<<"base "<<base<<" with n "<<n<<endl;
            
        }
    }
    if (ans < 0) 
        ans = (ans + d) % d;
    return ans;

}
