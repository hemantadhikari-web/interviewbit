Given a string A representing a roman numeral.

Convert A into integer.

A is guaranteed to be within the range from 1 to 3999.

NOTE: Read more 

details about roman numerals at Roman Numeric System

//sol 1 
int Solution::romanToInt(string A) {
int num = 0;
        int size = s.size();

        for (int i = 0; i < size; i++) {
            // Does lesser value precede higher value ? 
            if (i < (size - 1) && romanCharToInt(s[i]) < romanCharToInt(s[i + 1])) {
                num -= romanCharToInt(s[i]);
            } else {
                num += romanCharToInt(s[i]);
            }
        }
        return num;
    }

    int romanCharToInt(char c) {
        switch (c) {
            case 'I':   return 1;
            case 'V':   return 5;
            case 'X':   return 10;
            case 'L':   return 50;
            case 'C':   return 100;
            case 'D':   return 500;
            case 'M':   return 1000;
            default:    return 0;
        }
    }
};

//sol 2

int roman(char x){
    if (x== 'I'|| x=='i'){
        return 1;
    }
    else if(x== 'V' || x=='v'){
        return 5;
    }
    else if(x=='X' || x=='x'){
        return 10;
    }
    else if(x=='L' || x=='l'){
        return 50;
    }
    else if(x=='C' || x=='c'){
        return 100;
    }
    else if(x=='D' || x=='d'){
        return 500;
    }
    else if(x=='M' || x=='m'){
        return 1000;
    }



}



int Solution::romanToInt(string A) {
int ans=roman(A[0]);
    for(int i=1;i<A.size();i++){

        int val1= roman(A[i]);
        int val2= roman(A[i-1]);
        if(val2>=val1){
            ans+= val1;
        }
        else{
            ans+= val1-(2*val2);
        }

    }
return ans;
}
