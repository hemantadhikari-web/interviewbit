
There are A cities numbered from 1 to A. You have already visited M cities, the indices of which are given in an array B of M integers.

If a city with index i is visited, you can visit either the city with index i-1 (i >= 2) or the city with index i+1 (i < A) if they are not already visited. 
 Eg: if N = 5 and array M consists of [3, 4], then in the first level of moves, you can either visit 2 or 5.

You keep visiting cities in this fashion until all the cities are not visited. 
 Find the number of ways in which you can visit all the cities modulo 10^9+7.

typedef long long int ll;


ll power(ll x,ll y){
    ll res=1; 
    ll mod = pow(10,9)+7;
    while(y){
        if(y&1) res = (res*x)%mod; 
        y>>=1; 
        x = (x*x)%mod;
    }
    return res;
}

int solve(int A, vector<int> &B) {

    sort(B.begin(),B.end()); 
    ll mod= pow(10,9)+7;

    vector<int>un_vis; 
    
    int i=1;
    un_vis.push_back(B[0]-1);
    for(;i<B.size();i++){
        un_vis.push_back(B[i]-B[i-1]-1);
        cout<<"un_vis[i] "<<un_vis[i]<<endl;
    }
    un_vis.push_back(A-B[i-1]);
    int n = un_vis.size(); 
    cout<<"un_vis[i+1] "<<un_vis[i+1]<<endl;


    ll fact[100000]={1}; 
    for(ll f=1;f<100000;f++) {
    fact[f] = (f*fact[f-1])%mod;
    ll ans = 1;
    int x=A-B.size();
    int p=1;
    for(i=0;i<n;i++){
        if(!un_vis[i]) {
            continue;
        }

        if(i!=0&&i!=n-1){
            ans = (ans*power(2,un_vis[i]-1))%mod;
        }
        
        p = (p*fact[un_vis[i]])%mod;
    }
    ans = (ans*fact[x])%mod;
    ans = (ans*power(p,mod-2))%mod;
    }
    return ans;
    
}
