A|B =or operator ---- 
0 0 = 0
1 0 = 1
0 1 = 1
1 1 = 1
--------------------
A&B =and operator
0 0 = 0
1 0 = 0
0 1 = 0
1 1 = 1
---------------------
~A = Not operator
inverse the binary number i.e 0 to 1 and 1 to 
e.g : A(29) = 11101  
      ~A = 00010
---------------------
A^B = XOR operator
0 0 = 0
0 1 = 1
1 0 = 1
1 1 = 0
---------------------
Left side operator 
A<<x
 A = 29 ( 11101 ) and x = 2, 
so A << 2 means
  0 0 1 1 1 0 1 << 2
this sequence of digit shifts to the left by 2 positions  1 1 1 0 1 0 0  = 116 
---------------------
Right Shift Operators 
A>>x
A = 29 ( 11101 ) and x = 2, 
so A >> 2 means
0 0 1 1 1 0 1 >> 2
 this sequence of digit shifts to the right by 2 positions 0 0 0 0 1 1 1 = 7
 --------------------
 
 IMPORTANT TRICKS
 
 x & (x-1) will clear the lowest set bit of x
x & ~(x-1) extracts the lowest set bit of x (all others are clear). Pretty patterns when applied to a linear sequence.
x & (x + (1 << n)) = x, with the run of set bits (possibly length 0) starting at bit n cleared.
x & ~(x + (1 << n)) = the run of set bits (possibly length 0) in x, starting at bit n.
x | (x + 1) = x with the lowest cleared bit set.
x | ~(x + 1) = extracts the lowest cleared bit of x (all others are set).
x | (x - (1 << n)) = x, with the run of cleared bits (possibly length 0) starting at bit n set.
x | ~(x - (1 << n)) = the lowest run of cleared bits (possibly length 0) in x, starting at bit n are the only clear bits.
       
       
Key note:
you can rewrite A = A + B as A += B,
you can rewrite
A = A | B as A |= B or
A = A & B as A &= B
