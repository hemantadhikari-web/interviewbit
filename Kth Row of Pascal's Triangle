Given an index k, return the kth row of the Pascal’s triangle.

Pascal’s triangle : To generate A[C] in row R, sum up A’[C] and A’[C-1] from previous row R - 1.

Example:

Input : k = 3

Return : [1,3,3,1]
NOTE : k is 0 based. k = 0, corresponds to the row [1].

Note:Could you optimize your algorithm to use only O(k) extra space?

//sol

vector<int> Solution::getRow(int A) {
    vector<vector<int>> ans(A+1);

    for(int i=0;i <=A;i++){
        vector<int> tempr;
        tempr.push_back(1);

        //cout<<"first loop"<<endl;
        if(i!=0){
            tempr.push_back(i);
        }
        for(int j=2;j<i;j++){
            vector<int> temp= ans[i-1];
            int val = temp[j] + temp[j-1];
            tempr.push_back(val);
            //cout<<"inner loop"<<endl;

        }
        if(i>1){
            tempr.push_back(1);
        }
        ans[i] = tempr;
    }

return ans[ans.size()-1];


}


//sol 2
ector<int> Solution::getRow(int A) {
    
    vector<int>temp;// to store the resultant row
    
        int n  = 1;
        for( int col = 0; col <= A ; col++){// nth row will have n + 1 elements in pascal triangle
            temp.push_back(n);
            n = n * (A - col)/(col + 1);// mathematics
        }
    return temp; // resultant vector returned.
    // space complexity O(A).
    // time complexity O(A).
}
